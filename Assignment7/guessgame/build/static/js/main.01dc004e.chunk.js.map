{"version":3,"sources":["components/card.tsx","components/deckOfCards.tsx","components/gameLogic.tsx","components/game.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["Card","suit","number","this","DeckOfCards","deck","Array","initDeckOfCards","i","push","sort","Math","random","pop","length","GameLogic","currentCard","nextCard","usedCards","deckOfCards","undefined","guess","isDeckEmpty","Game","useState","gameLogic","setGameLogic","gameStarted","setGameStarted","score","setScore","setCurrentCard","onClick","src","imageSource","height","width","value","toString","showCardValue","console","log","disabled","newGameLogic","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01dc004e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport type Suit = 'Clubs' | 'Diamonds' | 'Hearts' | 'Spades';\r\n\r\nclass Card {\r\n\r\n    suit:Suit;\r\n    number:number;\r\n\r\n    constructor(suit: Suit, number:number) {\r\n        this.suit = suit;\r\n        this.number = number;\r\n    }\r\n\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card, { Suit } from \"./card\";\r\n\r\nclass DeckOfCards {\r\n\r\n    private deck = new Array<Card>();\r\n\r\n    constructor() {\r\n        this.initDeckOfCards();\r\n    }\r\n\r\n    private initDeckOfCards() {\r\n        for (var i = 1; i <= 13; i++) {\r\n            this.deck.push(new Card('Clubs', i));\r\n        }\r\n        for (var i = 1; i <= 13; i++) {\r\n            this.deck.push(new Card('Diamonds', i));\r\n        }\r\n        for (var i = 1; i <= 13; i++) {\r\n            this.deck.push(new Card('Hearts', i));\r\n        }\r\n        for (var i = 1; i <= 13; i++) {\r\n            this.deck.push(new Card('Spades', i));\r\n        }\r\n\r\n        this.deck = this.deck.sort(() => Math.random() - 0.5);\r\n    }\r\n\r\n    pop() {\r\n        return this.deck.pop();\r\n    }\r\n\r\n    isDeckEmpty(): boolean {\r\n        return this.deck.length > 0 ? false : true;\r\n    }\r\n\r\n}\r\n\r\nexport default DeckOfCards;","import React from 'react';\r\nimport Card from './card';\r\nimport DeckOfCards from './deckOfCards';\r\n\r\nclass GameLogic {\r\n\r\n    currentCard: Card | undefined;\r\n    nextCard: Card | undefined;\r\n    usedCards = new Array<Card>();\r\n\r\n\r\n    private deckOfCards = new DeckOfCards();\r\n\r\n    constructor() {\r\n        this.currentCard = this.deckOfCards.pop();\r\n        this.nextCard = this.deckOfCards.pop();\r\n        if (this.currentCard !== undefined) {\r\n            this.usedCards.push(this.currentCard);\r\n        }\r\n    }\r\n\r\n    guess(guess: string): boolean | undefined {\r\n\r\n        if (this.nextCard === undefined || this.currentCard === undefined) {\r\n            // game is over cause no next card.\r\n            return undefined;\r\n        }\r\n\r\n        if (guess === 'higher') {\r\n            if (this.currentCard?.number < this.nextCard?.number) {\r\n                // right guess\r\n                this.currentCard = this.nextCard;\r\n                if (this.currentCard !== undefined) {\r\n                    this.usedCards.push(this.currentCard);\r\n                }\r\n                this.nextCard = this.deckOfCards.pop();\r\n                return true;\r\n            }\r\n        } else if (guess === 'lower') {\r\n            if (this.currentCard?.number > this.nextCard?.number) {\r\n                // right guess\r\n                this.currentCard = this.nextCard;\r\n                if (this.currentCard !== undefined) {\r\n                    this.usedCards.push(this.currentCard);\r\n                }\r\n                this.nextCard = this.deckOfCards.pop();\r\n                return true;\r\n            }\r\n        } else if (guess === 'equal') {\r\n            if (this.currentCard?.number === this.nextCard?.number) {\r\n                // right guess\r\n                this.currentCard = this.nextCard;\r\n                if (this.currentCard !== undefined) {\r\n                    this.usedCards.push(this.currentCard);\r\n                }\r\n                this.nextCard = this.deckOfCards.pop();\r\n                return true;\r\n            }\r\n        }\r\n        // wrong guess\r\n        this.currentCard = this.nextCard;\r\n        if (this.currentCard !== undefined) {\r\n            this.usedCards.push(this.currentCard);\r\n        }\r\n        this.nextCard = this.deckOfCards.pop();\r\n        return false;\r\n    }\r\n\r\n    isDeckEmpty(): boolean {\r\n        return this.deckOfCards.isDeckEmpty();\r\n    }\r\n\r\n}\r\nexport default GameLogic;","import React, { useState } from 'react';\r\nimport GameLogic from './gameLogic';\r\n\r\nexport default function Game() {\r\n\r\n    const [gameLogic, setGameLogic] = useState(new GameLogic());\r\n    const [gameStarted, setGameStarted] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const [currentCard, setCurrentCard] = useState(gameLogic.currentCard);\r\n\r\n\r\n    const startGame = () => {\r\n        setGameStarted(true);\r\n    }\r\n\r\n    const guessOfHigher = () => {\r\n        const isHigher = gameLogic.guess('higher');\r\n\r\n        if (isHigher) {\r\n            const newScore = score + 1;\r\n            setScore(newScore);\r\n        }\r\n        setCurrentCard(gameLogic.currentCard);\r\n    }\r\n\r\n    const guessOfLower = () => {\r\n        const isLower = gameLogic.guess('lower');\r\n        if (isLower) {\r\n            const newScore = score + 1;\r\n            setScore(newScore);\r\n        }\r\n        setCurrentCard(gameLogic.currentCard);\r\n    }\r\n\r\n    const guessOfEqual = () => {\r\n        const isEqual = gameLogic.guess('equal');\r\n        if (isEqual) {\r\n            const newScore = score + 1;\r\n            setScore(newScore);\r\n        }\r\n        setCurrentCard(gameLogic.currentCard);\r\n    }\r\n\r\n    const reset = () => {\r\n        const newGameLogic = new GameLogic();\r\n        setGameLogic(newGameLogic);\r\n        setGameStarted(false);\r\n        setScore(0);\r\n        setCurrentCard(newGameLogic.currentCard)\r\n    }\r\n\r\n\r\n    const imageSource = (): string => {\r\n        switch (currentCard?.suit) {\r\n            case 'Clubs':\r\n                return '/Card_club.svg.png';\r\n            case 'Diamonds':\r\n                return '/Card_diamond.svg.png';\r\n            case 'Hearts':\r\n                return '/Card_heart.svg.png';\r\n            case 'Spades':\r\n                return '/Card_spade.svg.png';\r\n            default: return '';\r\n        }\r\n    }\r\n\r\n    const showCardValue = (value: number): string => {\r\n        switch (value) {\r\n            case 1: return 'A'\r\n            case 11: return 'J';\r\n            case 12: return 'Q';\r\n            case 13: return 'K';\r\n            default: return value.toString();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!gameStarted && <button onClick={startGame}>Start</button>}\r\n            {gameStarted && <div>\r\n\r\n                <img src={imageSource()} height='200' width='200' /><span>{showCardValue(currentCard !== undefined ? currentCard.number : 0)}</span>\r\n                {console.log(gameLogic.currentCard)}{console.log(gameLogic.isDeckEmpty())}\r\n                <button onClick={guessOfHigher} disabled={gameLogic.isDeckEmpty()}>Higher</button>\r\n                <button onClick={guessOfLower} disabled={gameLogic.isDeckEmpty()}>Lower</button>\r\n                <button onClick={guessOfEqual} disabled={gameLogic.isDeckEmpty()}>Equal</button>\r\n                <button onClick={reset} >Reset</button>\r\n                <span>Score: {score}</span>\r\n            </div>}\r\n        </div >\r\n    );\r\n}","import React from 'react';\nimport Game from './components/game';\nimport GameLogic from './components/gameLogic';\n\nfunction App() {\n\n  const gameLogic = new GameLogic();\n\n  const handleStartButton = () => {\n\n  }\n\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}